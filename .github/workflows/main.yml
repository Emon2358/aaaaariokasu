name: Decompile release asset and commit source (ilspy → ghidra fallback)

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'リリースがあるリポジトリ (owner/repo). 空欄でこのリポジトリを使う'
        required: false
        default: ''
      release_tag:
        description: 'release tag または "latest"'
        required: false
        default: 'latest'
      asset_pattern:
        description: 'ダウンロードするアセット名の正規表現（jq の test() に渡されます）。例: "\\.exe$"'
        required: false
        default: '\\.exe$'
      preferred_decompiler:
        description: '優先デコンパイラ (ilspy|ghidra). デフォルトは ilspy'
        required: false
        default: 'ilspy'

permissions:
  contents: write
  id-token: write

jobs:
  fetch-and-decompile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for committing later)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip curl openjdk-17-jdk-headless

      - name: Fetch release asset
        id: fetch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.event.inputs.repo || github.repository }}"
          TAG="${{ github.event.inputs.release_tag || 'latest' }}"
          PATTERN="${{ github.event.inputs.asset_pattern || '\\.exe$' }}"
          API="https://api.github.com/repos/$REPO/releases/${TAG == 'latest' && 'latest' || ('tags/' + TAG)}"

          echo "Fetching release from $API"
          RESP=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$API")

          ASSET_URL=$(echo "$RESP" | jq -r --arg pat "$PATTERN" '.assets[] | select(.name | test($pat)) | .browser_download_url' | head -n1)
          ASSET_NAME=$(echo "$RESP" | jq -r --arg pat "$PATTERN" '.assets[] | select(.name | test($pat)) | .name' | head -n1)
          if [ -z "$ASSET_URL" ]; then
            echo "Asset not found!"
            exit 1
          fi
          echo "Downloading $ASSET_NAME ..."
          curl -L -o "$ASSET_NAME" -H "Authorization: Bearer $GITHUB_TOKEN" "$ASSET_URL"
          echo "asset_name=$ASSET_NAME" >> $GITHUB_OUTPUT

      - name: Try decompile with ILSpy
        id: ilspy
        run: |
          set -euo pipefail
          dotnet tool install --global ilspycmd || true
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          mkdir -p recovered/ilspy
          if ilspycmd -o recovered/ilspy "${{ steps.fetch.outputs.asset_name }}" 2>/dev/null; then
            echo "succeeded=true" >> $GITHUB_OUTPUT
          else
            echo "succeeded=false" >> $GITHUB_OUTPUT
          fi

      - name: Fallback to Ghidra (native decompile)
        if: ${{ steps.ilspy.outputs.succeeded == 'false' }}
        run: |
          set -euo pipefail
          GHIDRA_ZIP="ghidra_10.2.4_PUBLIC_2023sep.zip"
          curl -L -O "https://ghidra-sre.org/${GHIDRA_ZIP}"
          unzip -q "$GHIDRA_ZIP"
          GHIDRA_DIR=$(ls -d ghidra_* | head -n1)
          mkdir -p recovered/ghidra_out
          "${GHIDRA_DIR}/support/analyzeHeadless" ghidra_project -import "${{ steps.fetch.outputs.asset_name }}" \
            -postScript ghidra_scripts/export_all_decompiled.py -deleteProject

      - name: Commit recovered source
        run: |
          BRANCH="recovered-${{ github.event.inputs.release_tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -B "$BRANCH"
          if [ -d recovered/ilspy ] && [ -n "$(ls -A recovered/ilspy)" ]; then
            git add recovered/ilspy
          elif [ -d recovered/ghidra_out ]; then
            git add recovered/ghidra_out
          fi
          git commit -m "Recovered source from release ${{ github.event.inputs.release_tag }}"
          git push -u origin "$BRANCH"
